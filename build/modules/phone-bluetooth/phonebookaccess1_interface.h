/*
 * This file was generated by qdbusxml2cpp version 0.8
 * Command line was: qdbusxml2cpp -p phonebookaccess1_interface.h: ../../../modules/phone-bluetooth/org.bluez.obex.PhonebookAccess1.xml
 *
 * qdbusxml2cpp is Copyright (C) 2017 The Qt Company Ltd.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef PHONEBOOKACCESS1_INTERFACE_H
#define PHONEBOOKACCESS1_INTERFACE_H

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface org.bluez.obex.PhonebookAccess1
 */
class OrgBluezObexPhonebookAccess1Interface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.bluez.obex.PhonebookAccess1"; }

public:
    OrgBluezObexPhonebookAccess1Interface(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = nullptr);

    ~OrgBluezObexPhonebookAccess1Interface();

    Q_PROPERTY(QString DatabaseIdentifier READ databaseIdentifier)
    inline QString databaseIdentifier() const
    { return qvariant_cast< QString >(property("DatabaseIdentifier")); }

    Q_PROPERTY(bool FixedImageSize READ fixedImageSize)
    inline bool fixedImageSize() const
    { return qvariant_cast< bool >(property("FixedImageSize")); }

    Q_PROPERTY(QString Folder READ folder)
    inline QString folder() const
    { return qvariant_cast< QString >(property("Folder")); }

    Q_PROPERTY(QString PrimaryCounter READ primaryCounter)
    inline QString primaryCounter() const
    { return qvariant_cast< QString >(property("PrimaryCounter")); }

    Q_PROPERTY(QString SecondaryCounter READ secondaryCounter)
    inline QString secondaryCounter() const
    { return qvariant_cast< QString >(property("SecondaryCounter")); }

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<ushort> GetSize()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("GetSize"), argumentList);
    }

    inline QDBusPendingReply<QList<QPair<QString,QString>> > List(const QVariantMap &filters)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(filters);
        return asyncCallWithArgumentList(QStringLiteral("List"), argumentList);
    }

    inline QDBusPendingReply<QStringList> ListFilterFields()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("ListFilterFields"), argumentList);
    }

    inline QDBusPendingReply<QDBusObjectPath, QVariantMap> Pull(const QString &vcard, const QString &targetfile, const QVariantMap &filters)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(vcard) << QVariant::fromValue(targetfile) << QVariant::fromValue(filters);
        return asyncCallWithArgumentList(QStringLiteral("Pull"), argumentList);
    }
    inline QDBusReply<QDBusObjectPath> Pull(const QString &vcard, const QString &targetfile, const QVariantMap &filters, QVariantMap &properties)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(vcard) << QVariant::fromValue(targetfile) << QVariant::fromValue(filters);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("Pull"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            properties = qdbus_cast<QVariantMap>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<QDBusObjectPath, QVariantMap> PullAll(const QString &targetfile, const QVariantMap &filters)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(targetfile) << QVariant::fromValue(filters);
        return asyncCallWithArgumentList(QStringLiteral("PullAll"), argumentList);
    }
    inline QDBusReply<QDBusObjectPath> PullAll(const QString &targetfile, const QVariantMap &filters, QVariantMap &properties)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(targetfile) << QVariant::fromValue(filters);
        QDBusMessage reply = callWithArgumentList(QDBus::Block, QStringLiteral("PullAll"), argumentList);
        if (reply.type() == QDBusMessage::ReplyMessage && reply.arguments().count() == 2) {
            properties = qdbus_cast<QVariantMap>(reply.arguments().at(1));
        }
        return reply;
    }

    inline QDBusPendingReply<QVariantMap> Search(const QString &field, const QString &value, const QVariantMap &filters)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(field) << QVariant::fromValue(value) << QVariant::fromValue(filters);
        return asyncCallWithArgumentList(QStringLiteral("Search"), argumentList);
    }

    inline QDBusPendingReply<> Select(const QString &location, const QString &phonebook)
    {
        QList<QVariant> argumentList;
        argumentList << QVariant::fromValue(location) << QVariant::fromValue(phonebook);
        return asyncCallWithArgumentList(QStringLiteral("Select"), argumentList);
    }

    inline QDBusPendingReply<> UpdateVersion()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QStringLiteral("UpdateVersion"), argumentList);
    }

Q_SIGNALS: // SIGNALS
};

namespace org {
  namespace bluez {
    namespace obex {
      typedef ::OrgBluezObexPhonebookAccess1Interface PhonebookAccess1;
    }
  }
}
#endif
